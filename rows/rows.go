// Code generated by "pkgimport -p rows -i gopkg.in/go-grm/rows.v1 -o rows.go"; DO NOT EDIT.
// Install by "go get -u -v gopkg.in/pkgimport.v1/cmd/pkgimport";
//go:generate pkgimport -p rows -i gopkg.in/go-grm/rows.v1 -o rows.go

package rows

import (
	origin "gopkg.in/go-grm/rows.v1"
)

type (
	// type

	/*
	 */
	Rows = origin.Rows
)

var (
	// function

	/*
	 */
	Hump2Snake = origin.Hump2Snake

	/*
	 */
	Snake2Hump = origin.Snake2Hump

	/*DataScan
	v should be a pointer type.
	Support type:
	 Base Type
	 struct
	 *struct
	 map[string]string
	 *map[string]string
	 map[string][]byte
	 *map[string][]byte
	List type:
	 []
	 [len]
	Example:
	 [100]map[string]string   Get 100 lines to map
	 map[string]string        Get 1 lines to map
	 []*struct                All to *struct
	 *[100]struct             Get 100 lines to struct

	var ret [100]map[string]string
	DataScan(key, data, &ret)

	*/
	RowsScan = origin.RowsScan

	/*
	 */
	DataScanBytes = origin.DataScanBytes

	/*RowsLimitBytes
	if limit >= 0 Read maximum rows limit
	else < 0 Not limited

	*/
	RowsLimitBytes = origin.RowsLimitBytes

	/*
	 */
	RowsScanBytes = origin.RowsScanBytes

	/*
	 */
	DataScanChannel = origin.DataScanChannel

	/*RowsLimitChannel
	if limit >= 0 Read maximum rows limit
	else < 0 Not limited

	*/
	RowsLimitChannel = origin.RowsLimitChannel

	/*
	 */
	RowsScanChannel = origin.RowsScanChannel

	/*
	 */
	MakeFieldName = origin.MakeFieldName

	/*ConvertAssign copies to dest the value in src, converting it if possible.
	An error is returned if the copy would result in loss of information.
	dest should be a pointer type.

	*/
	ConvertAssign = origin.ConvertAssign
)

var (
	// value

	/*
	 */
	MaxForkSize = origin.MaxForkSize

	/*
	 */
	MakeSliceCap = origin.MakeSliceCap

	/*
	 */
	MaxBuffer = origin.MaxBuffer

	/*
	 */
	ErrInvalidType = origin.ErrInvalidType

	/*
	 */
	ErrNotPointer = origin.ErrNotPointer

	/*
	 */
	ErrPointerNil = origin.ErrPointerNil
)
