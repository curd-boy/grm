// Code generated by "pkgimport -p rows -i github.com/wzshiming/rows -o rows.go"; DO NOT EDIT.
// Install by "go get -u -v github.com/wzshiming/gotype/cmd/pkgimport";
//go:generate pkgimport -p rows -i github.com/wzshiming/rows -o rows.go

package rows

import (
	origin "github.com/wzshiming/rows"
)

// type
type (

	// Rows Handle multiline interfaces
	Rows = origin.Rows
)

// function
var (

	// RowsScanChannel fill in rows to v
	RowsScanChannel = origin.RowsScanChannel

	// RowsScanBytes fill in rows to v
	RowsScanBytes = origin.RowsScanBytes

	// RowsScan v should be a pointer type.
	// Support type:
	// Base Type
	// struct
	// *struct
	// map[string]string
	// *map[string]string
	// map[string][]byte
	// *map[string][]byte
	// List type:
	// []
	// [len]
	// Example:
	// [100]map[string]string   Get 100 lines to map
	// map[string]string        Get 1 lines to map
	// []*struct                All to *struct
	// *[100]struct             Get 100 lines to struct
	//
	// var ret [100]map[string]string
	// DataScan(key, data, &ret)
	RowsScan = origin.RowsScan

	// RowsLimitChannel
	// if limit >= 0 Read maximum rows limit
	// else < 0 Not limited
	RowsLimitChannel = origin.RowsLimitChannel

	// RowsLimitBytes
	// if limit >= 0 Read maximum rows limit
	// else < 0 Not limited
	RowsLimitBytes = origin.RowsLimitBytes

	// MakeFieldName returns a function that gets the value of a field
	MakeFieldName = origin.MakeFieldName

	// DataScanChannel fill in key and data to v
	DataScanChannel = origin.DataScanChannel

	// DataScanBytes fill in key and data to v
	DataScanBytes = origin.DataScanBytes

	// ConvertAssign copies to dest the value in src, converting it if possible.
	// An error is returned if the copy would result in loss of information.
	// dest should be a pointer type.
	ConvertAssign = origin.ConvertAssign
)

// value
var (
	MaxForkSize = origin.MaxForkSize

	MaxBuffer = origin.MaxBuffer

	MakeSliceCap = origin.MakeSliceCap

	ErrPointerNil = origin.ErrPointerNil

	ErrNotPointer = origin.ErrNotPointer

	ErrInvalidType = origin.ErrInvalidType
)
