// Code generated by "grm --hl gen go -p tplsql -f ./sql/ -o ./sql.go"; DO NOT EDIT.

package tplsql

import (
	"fmt"
	"log"
	"os"
	"text/template"
	"time"

	"gopkg.in/grm.v1"
	"gopkg.in/grm.v1/rows"
)

var (
	begin     = time.Now()
	MaxLimit  = 10000                                                  // Max read rows limit
	FieldName = rows.MakeFieldName("sql")                              // Field name
	MaxFork   = 3                                                      // Max fork
	Template  = template.New("tplsql")                                 // template
	Path      = "./sql/"                                               // template file path
	Stdout    = os.Stdout                                              // std out
	Log       = log.New(Stdout, "[grm] ", log.LstdFlags|log.Llongfile) // Print
	Println   = func(i ...interface{}) {
		Log.Output(3, fmt.Sprint(i...))
	} // logger
)

func init() {
	Template.Funcs(grm.Funcs)
	template.Must(grm.ParseSqlFiles(Template, Path))
}

// GetTable 获取 指定库的所有表
//line sql/tables/tables.sql:17
func GetTable(db grm.DBQuery, req *ReqGetTable) (resp []*RespGetTable, err error) {
	name := "GetTable"

	var sql string
	sql, err = grm.Execute(Template.Lookup(name), req)
	if err != nil {
		return
	}

	if Println != nil {
		Println(sql)
	}

	if db == nil {
		db, err = grm.Get()
		if err != nil {
			return
		}
	}

	_, err = grm.Query(db, sql, req, &resp, MaxLimit, FieldName, MaxFork)
	return
}

// ReqGetTable ...
//line sql/tables/tables.sql:17
type ReqGetTable struct {
	TableSchema string `sql:"table_schema"` // 数据库名
}

// RespGetTable ...
//line sql/tables/tables.sql:17
type RespGetTable struct {
	TableName string `sql:"table_name"` // 所有表
}

// GetTableCount 获取 指定库的所有表
//line sql/tables/tables.sql:17
func GetTableCount(db grm.DBQuery, req *ReqGetTableCount) (resp *RespGetTableCount, err error) {
	name := "GetTable"

	var sql string
	sql, err = grm.ExecuteCount(Template.Lookup(name), req)
	if err != nil {
		return
	}

	if Println != nil {
		Println(sql)
	}

	if db == nil {
		db, err = grm.Get()
		if err != nil {
			return
		}
	}

	_, err = grm.Query(db, sql, req, &resp, MaxLimit, FieldName, MaxFork)
	return
}

// ReqGetTableCount ...
//line sql/tables/tables.sql:17
type ReqGetTableCount struct {
	TableSchema string `sql:"table_schema"` // 数据库名
}

// RespGetTableCount ...
//line sql/tables/tables.sql:17
type RespGetTableCount struct {
	Count int
}

// GetColumn 获取 指定库表的结构体
//line sql/tables/tables.sql:36
func GetColumn(db grm.DBQuery, req *ReqGetColumn) (resp []*RespGetColumn, err error) {
	name := "GetColumn"

	var sql string
	sql, err = grm.Execute(Template.Lookup(name), req)
	if err != nil {
		return
	}

	if Println != nil {
		Println(sql)
	}

	if db == nil {
		db, err = grm.Get()
		if err != nil {
			return
		}
	}

	_, err = grm.Query(db, sql, req, &resp, MaxLimit, FieldName, MaxFork)
	return
}

// ReqGetColumn ...
//line sql/tables/tables.sql:36
type ReqGetColumn struct {
	TableSchema string `sql:"table_schema"` // 数据库名
	TableName   string `sql:"table_name"`   // 表名
}

// RespGetColumn ...
//line sql/tables/tables.sql:36
type RespGetColumn struct {
	TableCatalog           string `sql:"table_catalog"`            // 表目录
	TableSchema            string `sql:"table_schema"`             // 数据库名
	TableName              string `sql:"table_name"`               // 表名
	ColumnName             string `sql:"column_name"`              // 字段名
	OrdinalPosition        int    `sql:"ordinal_position"`         // 字段所在位置
	ColumnDefault          string `sql:"column_default"`           // 字段默认值
	IsNullable             string `sql:"is_nullable"`              // 能是空值
	DataType               string `sql:"data_type"`                // 数据类型
	CharacterMaximumLength int    `sql:"character_maximum_length"` // 字符串最大长度
	CharacterOctetLength   int    `sql:"character_octet_length"`   // 字符串位长度
	NumericPrecision       int    `sql:"numeric_precision"`        // 数字精度
	NumericScale           string `sql:"numeric_scale"`            // 数字比例
	DatetimePrecision      int    `sql:"datetime_precision"`       // 时间精度
	CharacterSetName       string `sql:"character_set_name"`       // 字符编码
	CollationName          string `sql:"collation_name"`           // 字符编码
	ColumnType             string `sql:"column_type"`              // 列类型
	ColumnKey              string `sql:"column_key"`               // 列键
	Extra                  string `sql:"extra"`                    // 额外属性
	Privileges             string `sql:"privileges"`               // 特供
	ColumnComment          string `sql:"column_comment"`           // 注释
}

// GetCreateTable mysql 获取 指定库表的结构体
//line sql/tables/tables.sql:93
func GetCreateTable(db grm.DBQuery, req *ReqGetCreateTable) (resp *RespGetCreateTable, err error) {
	name := "GetCreateTable"

	var sql string
	sql, err = grm.Execute(Template.Lookup(name), req)
	if err != nil {
		return
	}

	if Println != nil {
		Println(sql)
	}

	if db == nil {
		db, err = grm.Get()
		if err != nil {
			return
		}
	}

	_, err = grm.Query(db, sql, req, &resp, MaxLimit, FieldName, MaxFork)
	return
}

// ReqGetCreateTable ...
//line sql/tables/tables.sql:93
type ReqGetCreateTable struct {
	TableSchema string `sql:"table_schema"` // 数据库名
	TableName   string `sql:"table_name"`   // 表名
}

// RespGetCreateTable ...
//line sql/tables/tables.sql:93
type RespGetCreateTable struct {
	SqlCreateTable string `sql:"sql_create_table"` // 创建表的sql
}

// GetSchema 获取 当前数据库名
//line sql/tables/tables.sql:6
func GetSchema(db grm.DBQuery) (resp *RespGetSchema, err error) {
	name := "GetSchema"

	var sql string
	sql, err = grm.Execute(Template.Lookup(name), nil)
	if err != nil {
		return
	}

	if Println != nil {
		Println(sql)
	}

	if db == nil {
		db, err = grm.Get()
		if err != nil {
			return
		}
	}

	_, err = grm.Query(db, sql, nil, &resp, MaxLimit, FieldName, MaxFork)
	return
}

// RespGetSchema ...
//line sql/tables/tables.sql:6
type RespGetSchema struct {
	TableSchema string `sql:"table_schema"` // 获取 当前数据库名
}
