// Code generated by "grm --hl gen go -p tplsql -f ./sql/ -o ./sql.go"; DO NOT EDIT.

package tplsql

import (
	"encoding/base64"
	"fmt"
	"log"
	"os"
	"text/template"
	"time"

	"gopkg.in/grm.v1"
	"gopkg.in/grm.v1/rows"
)

var (
	begin     = time.Now()                                             // start time
	MaxLimit  = 10000                                                  // Max read rows limit
	FieldName = rows.MakeFieldName("sql")                              // Field name
	MaxFork   = 3                                                      // Max fork
	Template  = template.New("tplsql")                                 // template
	Stdout    = os.Stdout                                              // std out
	Log       = log.New(Stdout, "[grm] ", log.LstdFlags|log.Llongfile) // Print
	Println   = func(i ...interface{}) {
		Log.Output(3, fmt.Sprint(i...))
	} // logger
)

func init() {
	Template.Funcs(grm.Funcs)

}

// GetColumn 获取 指定库表的结构体
//line sql/tables/tables.sql:36
func GetColumn(db grm.DBQuery, req *ReqGetColumn) (resp []*RespGetColumn, err error) {
	name := "GetColumn"

	temp := Template.Lookup(name)
	if temp == nil {
		var src []byte
		src, err = base64.StdEncoding.DecodeString("CgotLSBAVHlwZSBTZWxlY3QgICAgICAgICAgICAgICAgICBbXQotLSBAQ29tbSAi6I635Y+WIOaMh+WumuW6k+ihqOeahOe7k+aehOS9kyIKLS0gQFJlcSAgVGFibGVTY2hlbWEgICAgICAgICAgICAgc3RyaW5nIOaVsOaNruW6k+WQjQotLSBAUmVxICBUYWJsZU5hbWUgICAgICAgICAgICAgICBzdHJpbmcg6KGo5ZCNCi0tIEBSZXNwIFRhYmxlQ2F0YWxvZyAgICAgICAgICAgIHN0cmluZyDooajnm67lvZUKLS0gQFJlc3AgVGFibGVTY2hlbWEgICAgICAgICAgICAgc3RyaW5nIOaVsOaNruW6k+WQjQotLSBAUmVzcCBUYWJsZU5hbWUgICAgICAgICAgICAgICBzdHJpbmcg6KGo5ZCNCi0tIEBSZXNwIENvbHVtbk5hbWUgICAgICAgICAgICAgIHN0cmluZyDlrZfmrrXlkI0KLS0gQFJlc3AgT3JkaW5hbFBvc2l0aW9uICAgICAgICAgaW50ICAgIOWtl+auteaJgOWcqOS9jee9rgotLSBAUmVzcCBDb2x1bW5EZWZhdWx0ICAgICAgICAgICBzdHJpbmcg5a2X5q616buY6K6k5YC8Ci0tIEBSZXNwIElzTnVsbGFibGUgICAgICAgICAgICAgIHN0cmluZyDog73mmK/nqbrlgLwKLS0gQFJlc3AgRGF0YVR5cGUgICAgICAgICAgICAgICAgc3RyaW5nIOaVsOaNruexu+WeiwotLSBAUmVzcCBDaGFyYWN0ZXJNYXhpbXVtTGVuZ3RoICBpbnQgICAg5a2X56ym5Liy5pyA5aSn6ZW/5bqmCi0tIEBSZXNwIENoYXJhY3Rlck9jdGV0TGVuZ3RoICAgIGludCAgICDlrZfnrKbkuLLkvY3plb/luqYKLS0gQFJlc3AgTnVtZXJpY1ByZWNpc2lvbiAgICAgICAgaW50ICAgIOaVsOWtl+eyvuW6pgotLSBAUmVzcCBOdW1lcmljU2NhbGUgICAgICAgICAgICBzdHJpbmcg5pWw5a2X5q+U5L6LCi0tIEBSZXNwIERhdGV0aW1lUHJlY2lzaW9uICAgICAgIGludCAgICDml7bpl7Tnsr7luqYKLS0gQFJlc3AgQ2hhcmFjdGVyU2V0TmFtZSAgICAgICAgc3RyaW5nIOWtl+espue8lueggQotLSBAUmVzcCBDb2xsYXRpb25OYW1lICAgICAgICAgICBzdHJpbmcg5a2X56ym57yW56CBCi0tIEBSZXNwIENvbHVtblR5cGUgICAgICAgICAgICAgIHN0cmluZyDliJfnsbvlnosKLS0gQFJlc3AgQ29sdW1uS2V5ICAgICAgICAgICAgICAgc3RyaW5nIOWIl+mUrgotLSBAUmVzcCBFeHRyYSAgICAgICAgICAgICAgICAgICBzdHJpbmcg6aKd5aSW5bGe5oCnCi0tIEBSZXNwIFByaXZpbGVnZXMgICAgICAgICAgICAgIHN0cmluZyDnibnkvpsKLS0gQFJlc3AgQ29sdW1uQ29tbWVudCAgICAgICAgICAgc3RyaW5nIOazqOmHigoKU0VMRUNUIAogICAgdGFibGVfY2F0YWxvZywKICAgIHRhYmxlX3NjaGVtYSwKICAgIHRhYmxlX25hbWUsCiAgICBjb2x1bW5fbmFtZSwKICAgIG9yZGluYWxfcG9zaXRpb24sCiAgICBjb2x1bW5fZGVmYXVsdCwKICAgIGlzX251bGxhYmxlLAogICAgZGF0YV90eXBlLAogICAgY2hhcmFjdGVyX21heGltdW1fbGVuZ3RoLAogICAgY2hhcmFjdGVyX29jdGV0X2xlbmd0aCwKICAgIG51bWVyaWNfcHJlY2lzaW9uLAogICAgbnVtZXJpY19zY2FsZSwKICAgIGRhdGV0aW1lX3ByZWNpc2lvbiwKICAgIGNoYXJhY3Rlcl9zZXRfbmFtZSwKICAgIGNvbGxhdGlvbl9uYW1lLAogICAgY29sdW1uX3R5cGUsCiAgICBjb2x1bW5fa2V5LAogICAgZXh0cmEsCiAgICBwcml2aWxlZ2VzLAogICAgY29sdW1uX2NvbW1lbnQKRlJPTQogICAgaW5mb3JtYXRpb25fc2NoZW1hLmNvbHVtbnMKV0hFUkUKICAgIHRhYmxlX3NjaGVtYSA9IDpUYWJsZVNjaGVtYQogICAgICAgIEFORCB0YWJsZV9uYW1lID0gOlRhYmxlTmFtZQpPUkRFUiBCWSBvcmRpbmFsX3Bvc2l0aW9uOwo=")
		if err != nil {
			return
		}
		Template.New(name).Parse(string(src))
		temp = Template.Lookup(name)
	}

	var sql string
	sql, err = grm.Execute(temp, req)
	if err != nil {
		return
	}

	if Println != nil {
		Println(sql)
	}

	if db == nil {
		db, err = grm.Get()
		if err != nil {
			return
		}
	}

	_, err = grm.Query(db, sql, req, &resp, MaxLimit, FieldName, MaxFork)
	return
}

// ReqGetColumn ...
//line sql/tables/tables.sql:36
type ReqGetColumn struct {
	TableSchema string `sql:"table_schema"` // 数据库名
	TableName   string `sql:"table_name"`   // 表名
}

// RespGetColumn ...
//line sql/tables/tables.sql:36
type RespGetColumn struct {
	TableCatalog           string `sql:"table_catalog"`            // 表目录
	TableSchema            string `sql:"table_schema"`             // 数据库名
	TableName              string `sql:"table_name"`               // 表名
	ColumnName             string `sql:"column_name"`              // 字段名
	OrdinalPosition        int    `sql:"ordinal_position"`         // 字段所在位置
	ColumnDefault          string `sql:"column_default"`           // 字段默认值
	IsNullable             string `sql:"is_nullable"`              // 能是空值
	DataType               string `sql:"data_type"`                // 数据类型
	CharacterMaximumLength int    `sql:"character_maximum_length"` // 字符串最大长度
	CharacterOctetLength   int    `sql:"character_octet_length"`   // 字符串位长度
	NumericPrecision       int    `sql:"numeric_precision"`        // 数字精度
	NumericScale           string `sql:"numeric_scale"`            // 数字比例
	DatetimePrecision      int    `sql:"datetime_precision"`       // 时间精度
	CharacterSetName       string `sql:"character_set_name"`       // 字符编码
	CollationName          string `sql:"collation_name"`           // 字符编码
	ColumnType             string `sql:"column_type"`              // 列类型
	ColumnKey              string `sql:"column_key"`               // 列键
	Extra                  string `sql:"extra"`                    // 额外属性
	Privileges             string `sql:"privileges"`               // 特供
	ColumnComment          string `sql:"column_comment"`           // 注释
}

// GetCreateTable mysql 获取 指定库表的结构体
//line sql/tables/tables.sql:93
func GetCreateTable(db grm.DBQuery, req *ReqGetCreateTable) (resp *RespGetCreateTable, err error) {
	name := "GetCreateTable"

	temp := Template.Lookup(name)
	if temp == nil {
		var src []byte
		src, err = base64.StdEncoding.DecodeString("Ci0tIEBUeXBlIFNlbGVjdAotLSBAQ29tbSAibXlzcWwg6I635Y+WIOaMh+WumuW6k+ihqOeahOe7k+aehOS9kyIKLS0gQFJlcSAgVGFibGVTY2hlbWEgICAgICAgICAgICAgICAgICAgc3RyaW5nIOaVsOaNruW6k+WQjQotLSBAUmVxICBUYWJsZU5hbWUgICAgICAgICAgICAgICAgICAgICBzdHJpbmcg6KGo5ZCNCi0tIEBSZXNwIFNxbENyZWF0ZVRhYmxlICAgICAgICAgICAgICAgIHN0cmluZyDliJvlu7rooajnmoRzcWwKClNFTEVDVCAKICAgIENPTkNBVCgKICAgICAgICAgICAgJ0NSRUFURSBUQUJMRSBJRiBOT1QgRVhJU1RTICcsCiAgICAgICAgICAgICdgJywKICAgICAgICAgICAgdGFibGVfbmFtZSwKICAgICAgICAgICAgJ2AgKCcsCiAgICAgICAgICAgIEdST1VQX0NPTkNBVCgnXG4gICAgJywKICAgICAgICAgICAgICAgIENPTkNBVCgnYCcsIGNvbHVtbl9uYW1lLCAnYCcpLAogICAgICAgICAgICAgICAgJyAnLAogICAgICAgICAgICAgICAgY29sdW1uX3R5cGUsCiAgICAgICAgICAgICAgICAnICcsCiAgICAgICAgICAgICAgICBJRihpc19udWxsYWJsZSA9ICdOTycsICdOT1QgTlVMTCcsICdOVUxMJyksCiAgICAgICAgICAgICAgICBJRihjb2x1bW5fZGVmYXVsdCBJUyBOVUxMIE9SIGNvbHVtbl9kZWZhdWx0ID0gJycsICcnLCBDT05DQVQoJyBERUZBVUxUIFwnJywgY29sdW1uX2RlZmF1bHQsICdcJycpKSwKICAgICAgICAgICAgICAgIElGKGV4dHJhIElTIE5VTEwgT1IgZXh0cmEgPSAnJywgJycsIENPTkNBVCgnICcsIGV4dHJhKSksCiAgICAgICAgICAgICAgICBJRihjb2x1bW5fY29tbWVudCBJUyBOVUxMIE9SIGNvbHVtbl9jb21tZW50ID0gJycsICcnLCBDT05DQVQoJyBDT01NRU5UIFwnJywgY29sdW1uX2NvbW1lbnQsICdcJycpKQogICAgICAgICAgICApLAogICAgICAgICAgICAnLCcsCiAgICAgICAgICAgIChTRUxFQ1QgCiAgICAgICAgICAgICAgICBHUk9VUF9DT05DQVQoJ1xuICAgICcsIGtleV9jb2x1bW4ua2V5X2NvbHVtbikKICAgICAgICAgICAgRlJPTQogICAgICAgICAgICAgICAgKFNFTEVDVCAKICAgICAgICAgICAgICAgICAgICBDT05DQVQoCiAgICAgICAgICAgICAgICAgICAgICAgIElGKGNvbnN0cmFpbnRfbmFtZSA9ICdQUklNQVJZJywgJ1BSSU1BUlkgS0VZJywgQ09OQ0FUKCdVTklRVUUgS0VZIGAnLCBjb25zdHJhaW50X25hbWUsICdgJykpLCAKICAgICAgICAgICAgICAgICAgICAgICAgJyAoJywgCiAgICAgICAgICAgICAgICAgICAgICAgIEdST1VQX0NPTkNBVCgnIGAnLCBjb2x1bW5fbmFtZSwgJ2AnKSwgCiAgICAgICAgICAgICAgICAgICAgICAgICcgKScKICAgICAgICAgICAgICAgICAgICApIGtleV9jb2x1bW4KICAgICAgICAgICAgICAgIEZST00KICAgICAgICAgICAgICAgICAgICBpbmZvcm1hdGlvbl9zY2hlbWEua2V5X2NvbHVtbl91c2FnZQogICAgICAgICAgICAgICAgV0hFUkUKICAgICAgICAgICAgICAgICAgICB0YWJsZV9uYW1lID0gJ2EnCiAgICAgICAgICAgICAgICBHUk9VUCBCWSBjb25zdHJhaW50X25hbWUpIEFTIGtleV9jb2x1bW4KICAgICAgICAgICAgKSwKICAgICAgICAgICAgJ1xuKScsCiAgICAgICAgICAgIChTRUxFQ1QgCiAgICAgICAgICAgICAgICBDT05DQVQoCiAgICAgICAgICAgICAgICAgICAgJyBFTkdJTkU9JywKICAgICAgICAgICAgICAgICAgICBlbmdpbmUsCiAgICAgICAgICAgICAgICAgICAgJyBERUZBVUxUIENIQVJTRVQ9JywKICAgICAgICAgICAgICAgICAgICAoU0VMRUNUIAogICAgICAgICAgICAgICAgICAgICAgICBjaGFyYWN0ZXJfc2V0X25hbWUKICAgICAgICAgICAgICAgICAgICBGUk9NCiAgICAgICAgICAgICAgICAgICAgICAgIGluZm9ybWF0aW9uX3NjaGVtYS5jb2xsYXRpb25zCiAgICAgICAgICAgICAgICAgICAgV0hFUkUKICAgICAgICAgICAgICAgICAgICAgICAgY29sbGF0aW9uX25hbWUgPSB0YWJsZV9jb2xsYXRpb24KICAgICAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgICAgICcgQ09NTUVOVD1cJycsCiAgICAgICAgICAgICAgICAgICAgdGFibGVfY29tbWVudCwKICAgICAgICAgICAgICAgICAgICAnXCcnIAogICAgICAgICAgICAgICAgKQogICAgICAgICAgICBGUk9NCiAgICAgICAgICAgICAgICBpbmZvcm1hdGlvbl9zY2hlbWEudGFibGVzCiAgICAgICAgICAgIFdIRVJFCiAgICAgICAgICAgICAgICB0YWJsZV9zY2hlbWEgPSA6VGFibGVTY2hlbWEgQU5EIHRhYmxlX25hbWUgPSA6VGFibGVOYW1lCiAgICAgICAgICAgICksCiAgICAgICAgICAgICc7JwogICAgKSBBUyBzcWxfY3JlYXRlX3RhYmxlCkZST00KICAgIGluZm9ybWF0aW9uX3NjaGVtYS5jb2x1bW5zCldIRVJFCiAgICB0YWJsZV9zY2hlbWEgPSA6VGFibGVTY2hlbWEgQU5EIHRhYmxlX25hbWUgPSA6VGFibGVOYW1lOwo=")
		if err != nil {
			return
		}
		Template.New(name).Parse(string(src))
		temp = Template.Lookup(name)
	}

	var sql string
	sql, err = grm.Execute(temp, req)
	if err != nil {
		return
	}

	if Println != nil {
		Println(sql)
	}

	if db == nil {
		db, err = grm.Get()
		if err != nil {
			return
		}
	}

	_, err = grm.Query(db, sql, req, &resp, MaxLimit, FieldName, MaxFork)
	return
}

// ReqGetCreateTable ...
//line sql/tables/tables.sql:93
type ReqGetCreateTable struct {
	TableSchema string `sql:"table_schema"` // 数据库名
	TableName   string `sql:"table_name"`   // 表名
}

// RespGetCreateTable ...
//line sql/tables/tables.sql:93
type RespGetCreateTable struct {
	SqlCreateTable string `sql:"sql_create_table"` // 创建表的sql
}

// GetSchema 获取 当前数据库名
//line sql/tables/tables.sql:6
func GetSchema(db grm.DBQuery) (resp *RespGetSchema, err error) {
	name := "GetSchema"

	temp := Template.Lookup(name)
	if temp == nil {
		var src []byte
		src, err = base64.StdEncoding.DecodeString("CgotLSBAVHlwZSBTZWxlY3QKLS0gQENvbW0gIuiOt+WPliDlvZPliY3mlbDmja7lupPlkI0iCi0tIEBSZXNwIFRhYmxlU2NoZW1hICAgICAgICAgc3RyaW5nICLojrflj5Yg5b2T5YmN5pWw5o2u5bqT5ZCNIgoKU0VMRUNUIERBVEFCQVNFKCkgQVMgdGFibGVfc2NoZW1hOwoK")
		if err != nil {
			return
		}
		Template.New(name).Parse(string(src))
		temp = Template.Lookup(name)
	}

	var sql string
	sql, err = grm.Execute(temp, nil)
	if err != nil {
		return
	}

	if Println != nil {
		Println(sql)
	}

	if db == nil {
		db, err = grm.Get()
		if err != nil {
			return
		}
	}

	_, err = grm.Query(db, sql, nil, &resp, MaxLimit, FieldName, MaxFork)
	return
}

// RespGetSchema ...
//line sql/tables/tables.sql:6
type RespGetSchema struct {
	TableSchema string `sql:"table_schema"` // 获取 当前数据库名
}

// GetTable 获取 指定库的所有表
//line sql/tables/tables.sql:17
func GetTable(db grm.DBQuery, req *ReqGetTable) (resp []*RespGetTable, err error) {
	name := "GetTable"

	temp := Template.Lookup(name)
	if temp == nil {
		var src []byte
		src, err = base64.StdEncoding.DecodeString("CgotLSBAVHlwZSAgU2VsZWN0ICAgICAgICAgICAgICAgIFtdCi0tIEBDb21tICAi6I635Y+WIOaMh+WumuW6k+eahOaJgOacieihqCIKLS0gQENvdW50Ci0tIEBSZXEgICBUYWJsZVNjaGVtYSAgICAgICAgICAgc3RyaW5nIOaVsOaNruW6k+WQjQotLSBAUmVzcCAgVGFibGVOYW1lICAgICAgICAgICAgIHN0cmluZyDmiYDmnInooagKClNFTEVDVCAKICAgIHRhYmxlX25hbWUKRlJPTQogICAgaW5mb3JtYXRpb25fc2NoZW1hLmNvbHVtbnMKV0hFUkUKICAgIHRhYmxlX3NjaGVtYSA9IDpUYWJsZVNjaGVtYQpHUk9VUCBCWSB0YWJsZV9uYW1lOwoK")
		if err != nil {
			return
		}
		Template.New(name).Parse(string(src))
		temp = Template.Lookup(name)
	}

	var sql string
	sql, err = grm.Execute(temp, req)
	if err != nil {
		return
	}

	if Println != nil {
		Println(sql)
	}

	if db == nil {
		db, err = grm.Get()
		if err != nil {
			return
		}
	}

	_, err = grm.Query(db, sql, req, &resp, MaxLimit, FieldName, MaxFork)
	return
}

// ReqGetTable ...
//line sql/tables/tables.sql:17
type ReqGetTable struct {
	TableSchema string `sql:"table_schema"` // 数据库名
}

// RespGetTable ...
//line sql/tables/tables.sql:17
type RespGetTable struct {
	TableName string `sql:"table_name"` // 所有表
}

// GetTableCount 获取 指定库的所有表
//line sql/tables/tables.sql:17
func GetTableCount(db grm.DBQuery, req *ReqGetTableCount) (resp *RespGetTableCount, err error) {
	name := "GetTable"

	temp := Template.Lookup(name)
	if temp == nil {
		var src []byte
		src, err = base64.StdEncoding.DecodeString("CgotLSBAVHlwZSAgU2VsZWN0ICAgICAgICAgICAgICAgIFtdCi0tIEBDb21tICAi6I635Y+WIOaMh+WumuW6k+eahOaJgOacieihqCIKLS0gQENvdW50Ci0tIEBSZXEgICBUYWJsZVNjaGVtYSAgICAgICAgICAgc3RyaW5nIOaVsOaNruW6k+WQjQotLSBAUmVzcCAgVGFibGVOYW1lICAgICAgICAgICAgIHN0cmluZyDmiYDmnInooagKClNFTEVDVCAKICAgIHRhYmxlX25hbWUKRlJPTQogICAgaW5mb3JtYXRpb25fc2NoZW1hLmNvbHVtbnMKV0hFUkUKICAgIHRhYmxlX3NjaGVtYSA9IDpUYWJsZVNjaGVtYQpHUk9VUCBCWSB0YWJsZV9uYW1lOwoK")
		if err != nil {
			return
		}
		Template.New(name).Parse(string(src))
		temp = Template.Lookup(name)
	}

	var sql string
	sql, err = grm.ExecuteCount(temp, req)
	if err != nil {
		return
	}

	if Println != nil {
		Println(sql)
	}

	if db == nil {
		db, err = grm.Get()
		if err != nil {
			return
		}
	}

	_, err = grm.Query(db, sql, req, &resp, MaxLimit, FieldName, MaxFork)
	return
}

// ReqGetTableCount ...
//line sql/tables/tables.sql:17
type ReqGetTableCount struct {
	TableSchema string `sql:"table_schema"` // 数据库名
}

// RespGetTableCount ...
//line sql/tables/tables.sql:17
type RespGetTableCount struct {
	Count int
}
