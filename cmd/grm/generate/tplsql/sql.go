// Code generated by "grm --hl gen go -p tplsql -f ./sql/ -o ./sql.go"; DO NOT EDIT.

package tplsql

import (
	"database/sql"
	"encoding/base64"
	"fmt"
	"log"
	"os"
	"text/template"
	"time"

	"gopkg.in/grm.v1"
	"gopkg.in/grm.v1/rows"
)

var (
	begin     = time.Now()                                             // start time
	MaxLimit  = 10000                                                  // Max read rows limit
	FieldName = rows.MakeFieldName("sql")                              // Field name
	MaxFork   = 3                                                      // Max fork
	Template  = template.New("tplsql")                                 // template
	Stdout    = os.Stdout                                              // std out
	Log       = log.New(Stdout, "[grm] ", log.LstdFlags|log.Llongfile) // Print
	Println   = func(i ...interface{}) {
		Log.Output(3, fmt.Sprint(i...))
	} // logger
	GetDB = func() (*sql.DB, error) {
		db, err := grm.Get()
		return db, err
	} // db conn
)

func init() {
	Template.Funcs(grm.Funcs)

}

// GetColumn 获取 指定库表的结构体
//line sql/gen_sql.sql:36
func GetColumn(req *ReqGetColumn) (resp []*RespGetColumn, err error) {
	name := "GetColumn"

	temp := Template.Lookup(name)
	if temp == nil {
		var src []byte
		src, err = base64.StdEncoding.DecodeString("CgotLSBAVHlwZSBTZWxlY3QgICAgICAgICAgICAgICAgICBbXQotLSBAQ29tbSAi6I635Y+WIOaMh+WumuW6k+ihqOeahOe7k+aehOS9kyIKLS0gQFJlcSAgVGFibGVTY2hlbWEgICAgICAgICAgICAgc3RyaW5nIOaVsOaNruW6k+WQjQotLSBAUmVxICBUYWJsZU5hbWUgICAgICAgICAgICAgICBzdHJpbmcg6KGo5ZCNCi0tIEBSZXNwIFRhYmxlQ2F0YWxvZyAgICAgICAgICAgIHN0cmluZyDooajnm67lvZUKLS0gQFJlc3AgVGFibGVTY2hlbWEgICAgICAgICAgICAgc3RyaW5nIOaVsOaNruW6k+WQjQotLSBAUmVzcCBUYWJsZU5hbWUgICAgICAgICAgICAgICBzdHJpbmcg6KGo5ZCNCi0tIEBSZXNwIENvbHVtbk5hbWUgICAgICAgICAgICAgIHN0cmluZyDlrZfmrrXlkI0KLS0gQFJlc3AgT3JkaW5hbFBvc2l0aW9uICAgICAgICAgaW50ICAgIOWtl+auteaJgOWcqOS9jee9rgotLSBAUmVzcCBDb2x1bW5EZWZhdWx0ICAgICAgICAgICBzdHJpbmcg5a2X5q616buY6K6k5YC8Ci0tIEBSZXNwIElzTnVsbGFibGUgICAgICAgICAgICAgIHN0cmluZyDog73mmK/nqbrlgLwKLS0gQFJlc3AgRGF0YVR5cGUgICAgICAgICAgICAgICAgc3RyaW5nIOaVsOaNruexu+WeiwotLSBAUmVzcCBDaGFyYWN0ZXJNYXhpbXVtTGVuZ3RoICBpbnQgICAg5a2X56ym5Liy5pyA5aSn6ZW/5bqmCi0tIEBSZXNwIENoYXJhY3Rlck9jdGV0TGVuZ3RoICAgIGludCAgICDlrZfnrKbkuLLkvY3plb/luqYKLS0gQFJlc3AgTnVtZXJpY1ByZWNpc2lvbiAgICAgICAgaW50ICAgIOaVsOWtl+eyvuW6pgotLSBAUmVzcCBOdW1lcmljU2NhbGUgICAgICAgICAgICBzdHJpbmcg5pWw5a2X5q+U5L6LCi0tIEBSZXNwIERhdGV0aW1lUHJlY2lzaW9uICAgICAgIGludCAgICDml7bpl7Tnsr7luqYKLS0gQFJlc3AgQ2hhcmFjdGVyU2V0TmFtZSAgICAgICAgc3RyaW5nIOWtl+espue8lueggQotLSBAUmVzcCBDb2xsYXRpb25OYW1lICAgICAgICAgICBzdHJpbmcg5a2X56ym57yW56CBCi0tIEBSZXNwIENvbHVtblR5cGUgICAgICAgICAgICAgIHN0cmluZyDliJfnsbvlnosKLS0gQFJlc3AgQ29sdW1uS2V5ICAgICAgICAgICAgICAgc3RyaW5nIOWIl+mUrgotLSBAUmVzcCBFeHRyYSAgICAgICAgICAgICAgICAgICBzdHJpbmcg6aKd5aSW5bGe5oCnCi0tIEBSZXNwIFByaXZpbGVnZXMgICAgICAgICAgICAgIHN0cmluZyDnibnkvpsKLS0gQFJlc3AgQ29sdW1uQ29tbWVudCAgICAgICAgICAgc3RyaW5nIOazqOmHigoKU0VMRUNUCiAgICBgdGFibGVfY2F0YWxvZ2AsCiAgICBgdGFibGVfc2NoZW1hYCwKICAgIGB0YWJsZV9uYW1lYCwKICAgIGBjb2x1bW5fbmFtZWAsCiAgICBgb3JkaW5hbF9wb3NpdGlvbmAsCiAgICBgY29sdW1uX2RlZmF1bHRgLAogICAgYGlzX251bGxhYmxlYCwKICAgIGBkYXRhX3R5cGVgLAogICAgYGNoYXJhY3Rlcl9tYXhpbXVtX2xlbmd0aGAsCiAgICBgY2hhcmFjdGVyX29jdGV0X2xlbmd0aGAsCiAgICBgbnVtZXJpY19wcmVjaXNpb25gLAogICAgYG51bWVyaWNfc2NhbGVgLAogICAgYGRhdGV0aW1lX3ByZWNpc2lvbmAsCiAgICBgY2hhcmFjdGVyX3NldF9uYW1lYCwKICAgIGBjb2xsYXRpb25fbmFtZWAsCiAgICBgY29sdW1uX3R5cGVgLAogICAgYGNvbHVtbl9rZXlgLAogICAgYGV4dHJhYCwKICAgIGBwcml2aWxlZ2VzYCwKICAgIGBjb2x1bW5fY29tbWVudGAKRlJPTQogICAgYGluZm9ybWF0aW9uX3NjaGVtYWAuYGNvbHVtbnNgCldIRVJFCiAgICBgdGFibGVfc2NoZW1hYCA9IDpUYWJsZVNjaGVtYQogICAgICAgIEFORCBgdGFibGVfbmFtZWAgPSA6VGFibGVOYW1lCk9SREVSIEJZIGBvcmRpbmFsX3Bvc2l0aW9uYDsK")
		if err != nil {
			return
		}
		Template.New(name).Parse(string(src))
		temp = Template.Lookup(name)
	}

	var sqlStr string
	sqlStr, err = grm.Execute(temp, req)
	if err != nil {
		return
	}

	if Println != nil {
		Println(sqlStr)
	}

	var db *sql.DB
	db, err = GetDB()
	if err != nil {
		return
	}

	_, err = grm.Query(db, sqlStr, req, &resp, MaxLimit, FieldName, MaxFork)
	return
}

// ReqGetColumn ...
//line sql/gen_sql.sql:36
type ReqGetColumn struct {
	TableSchema string `sql:"table_schema"` // 数据库名
	TableName   string `sql:"table_name"`   // 表名
}

// RespGetColumn ...
//line sql/gen_sql.sql:36
type RespGetColumn struct {
	TableCatalog           string `sql:"table_catalog"`            // 表目录
	TableSchema            string `sql:"table_schema"`             // 数据库名
	TableName              string `sql:"table_name"`               // 表名
	ColumnName             string `sql:"column_name"`              // 字段名
	OrdinalPosition        int    `sql:"ordinal_position"`         // 字段所在位置
	ColumnDefault          string `sql:"column_default"`           // 字段默认值
	IsNullable             string `sql:"is_nullable"`              // 能是空值
	DataType               string `sql:"data_type"`                // 数据类型
	CharacterMaximumLength int    `sql:"character_maximum_length"` // 字符串最大长度
	CharacterOctetLength   int    `sql:"character_octet_length"`   // 字符串位长度
	NumericPrecision       int    `sql:"numeric_precision"`        // 数字精度
	NumericScale           string `sql:"numeric_scale"`            // 数字比例
	DatetimePrecision      int    `sql:"datetime_precision"`       // 时间精度
	CharacterSetName       string `sql:"character_set_name"`       // 字符编码
	CollationName          string `sql:"collation_name"`           // 字符编码
	ColumnType             string `sql:"column_type"`              // 列类型
	ColumnKey              string `sql:"column_key"`               // 列键
	Extra                  string `sql:"extra"`                    // 额外属性
	Privileges             string `sql:"privileges"`               // 特供
	ColumnComment          string `sql:"column_comment"`           // 注释
}

// GetCreateTable mysql 获取 指定库表的结构体
//line sql/gen_sql.sql:93
func GetCreateTable(req *ReqGetCreateTable) (resp *RespGetCreateTable, err error) {
	name := "GetCreateTable"

	temp := Template.Lookup(name)
	if temp == nil {
		var src []byte
		src, err = base64.StdEncoding.DecodeString("Ci0tIEBUeXBlIFNlbGVjdAotLSBAQ29tbSAibXlzcWwg6I635Y+WIOaMh+WumuW6k+ihqOeahOe7k+aehOS9kyIKLS0gQFJlcSAgVGFibGVTY2hlbWEgICAgICAgICAgICAgICAgICAgc3RyaW5nIOaVsOaNruW6k+WQjQotLSBAUmVxICBUYWJsZU5hbWUgICAgICAgICAgICAgICAgICAgICBzdHJpbmcg6KGo5ZCNCi0tIEBSZXNwIFNxbENyZWF0ZVRhYmxlICAgICAgICAgICAgICAgIHN0cmluZyDliJvlu7rooajnmoRzcWwKClNFTEVDVCAKICAgIENPTkNBVCgKICAgICAgICAgICAgJ0NSRUFURSBUQUJMRSBJRiBOT1QgRVhJU1RTICcsCiAgICAgICAgICAgICdgJywKICAgICAgICAgICAgYHRhYmxlX25hbWVgLAogICAgICAgICAgICAnYCAoJywKICAgICAgICAgICAgR1JPVVBfQ09OQ0FUKCdcbiAgICAnLAogICAgICAgICAgICAgICAgQ09OQ0FUKCdgJywgYGNvbHVtbl9uYW1lYCwgJ2AnKSwKICAgICAgICAgICAgICAgICcgJywKICAgICAgICAgICAgICAgIGBjb2x1bW5fdHlwZWAsCiAgICAgICAgICAgICAgICAnICcsCiAgICAgICAgICAgICAgICBJRihgaXNfbnVsbGFibGVgID0gJ05PJywgJ05PVCBOVUxMJywgJ05VTEwnKSwKICAgICAgICAgICAgICAgIElGKGBjb2x1bW5fZGVmYXVsdGAgSVMgTlVMTCBPUiBgY29sdW1uX2RlZmF1bHRgID0gJycsICcnLCBDT05DQVQoJyBERUZBVUxUIFwnJywgYGNvbHVtbl9kZWZhdWx0YCwgJ1wnJykpLAogICAgICAgICAgICAgICAgSUYoYGV4dHJhYCBJUyBOVUxMIE9SIGBleHRyYWAgPSAnJywgJycsIENPTkNBVCgnICcsIGBleHRyYWApKSwKICAgICAgICAgICAgICAgIElGKGBjb2x1bW5fY29tbWVudGAgSVMgTlVMTCBPUiBgY29sdW1uX2NvbW1lbnRgID0gJycsICcnLCBDT05DQVQoJyBDT01NRU5UIFwnJywgYGNvbHVtbl9jb21tZW50YCwgJ1wnJykpCiAgICAgICAgICAgICksCiAgICAgICAgICAgICcsJywKICAgICAgICAgICAgKFNFTEVDVCAKICAgICAgICAgICAgICAgIEdST1VQX0NPTkNBVCgnXG4gICAgJywgYGtleV9jb2x1bW5gLmBrZXlfY29sdW1uYCkKICAgICAgICAgICAgRlJPTQogICAgICAgICAgICAgICAgKFNFTEVDVCAKICAgICAgICAgICAgICAgICAgICBDT05DQVQoCiAgICAgICAgICAgICAgICAgICAgICAgIElGKGBjb25zdHJhaW50X25hbWVgID0gJ1BSSU1BUlknLCAnUFJJTUFSWSBLRVknLCBDT05DQVQoJ1VOSVFVRSBLRVkgYCcsIGBjb25zdHJhaW50X25hbWVgLCAnYCcpKSwgCiAgICAgICAgICAgICAgICAgICAgICAgICcgKCcsIAogICAgICAgICAgICAgICAgICAgICAgICBHUk9VUF9DT05DQVQoJyBgJywgYGNvbHVtbl9uYW1lYCwgJ2AnKSwgCiAgICAgICAgICAgICAgICAgICAgICAgICcgKScKICAgICAgICAgICAgICAgICAgICApIGBrZXlfY29sdW1uYAogICAgICAgICAgICAgICAgRlJPTQogICAgICAgICAgICAgICAgICAgIGBpbmZvcm1hdGlvbl9zY2hlbWFgLmBrZXlfY29sdW1uX3VzYWdlYAogICAgICAgICAgICAgICAgV0hFUkUKICAgICAgICAgICAgICAgICAgICBgdGFibGVfc2NoZW1hYCA9IDpUYWJsZVNjaGVtYSBBTkQgYHRhYmxlX25hbWVgID0gOlRhYmxlTmFtZQogICAgICAgICAgICAgICAgR1JPVVAgQlkgYGNvbnN0cmFpbnRfbmFtZWApIEFTIGBrZXlfY29sdW1uYAogICAgICAgICAgICApLAogICAgICAgICAgICAnXG4pJywKICAgICAgICAgICAgKFNFTEVDVCAKICAgICAgICAgICAgICAgIENPTkNBVCgKICAgICAgICAgICAgICAgICAgICAnIEVOR0lORT0nLAogICAgICAgICAgICAgICAgICAgIGBlbmdpbmVgLAogICAgICAgICAgICAgICAgICAgICcgREVGQVVMVCBDSEFSU0VUPScsCiAgICAgICAgICAgICAgICAgICAgKFNFTEVDVCAKICAgICAgICAgICAgICAgICAgICAgICAgYGNoYXJhY3Rlcl9zZXRfbmFtZWAKICAgICAgICAgICAgICAgICAgICBGUk9NCiAgICAgICAgICAgICAgICAgICAgICAgIGBpbmZvcm1hdGlvbl9zY2hlbWFgLmBjb2xsYXRpb25zYAogICAgICAgICAgICAgICAgICAgIFdIRVJFCiAgICAgICAgICAgICAgICAgICAgICAgIGBjb2xsYXRpb25fbmFtZWAgPSBgdGFibGVfY29sbGF0aW9uYAogICAgICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICAgICAgJyBDT01NRU5UPVwnJywKICAgICAgICAgICAgICAgICAgICB0YWJsZV9jb21tZW50LAogICAgICAgICAgICAgICAgICAgICdcJycgCiAgICAgICAgICAgICAgICApCiAgICAgICAgICAgIEZST00KICAgICAgICAgICAgICAgIGBpbmZvcm1hdGlvbl9zY2hlbWFgLmB0YWJsZXNgCiAgICAgICAgICAgIFdIRVJFCiAgICAgICAgICAgICAgICBgdGFibGVfc2NoZW1hYCA9IDpUYWJsZVNjaGVtYSBBTkQgYHRhYmxlX25hbWVgID0gOlRhYmxlTmFtZQogICAgICAgICAgICApLAogICAgICAgICAgICAnOycKICAgICkgQVMgYHNxbF9jcmVhdGVfdGFibGVgCkZST00KICAgIGBpbmZvcm1hdGlvbl9zY2hlbWFgLmBjb2x1bW5zYApXSEVSRQogICAgYHRhYmxlX3NjaGVtYWAgPSA6VGFibGVTY2hlbWEgQU5EIGB0YWJsZV9uYW1lYCA9IDpUYWJsZU5hbWU7Cg==")
		if err != nil {
			return
		}
		Template.New(name).Parse(string(src))
		temp = Template.Lookup(name)
	}

	var sqlStr string
	sqlStr, err = grm.Execute(temp, req)
	if err != nil {
		return
	}

	if Println != nil {
		Println(sqlStr)
	}

	var db *sql.DB
	db, err = GetDB()
	if err != nil {
		return
	}

	_, err = grm.Query(db, sqlStr, req, &resp, MaxLimit, FieldName, MaxFork)
	return
}

// ReqGetCreateTable ...
//line sql/gen_sql.sql:93
type ReqGetCreateTable struct {
	TableSchema string `sql:"table_schema"` // 数据库名
	TableName   string `sql:"table_name"`   // 表名
}

// RespGetCreateTable ...
//line sql/gen_sql.sql:93
type RespGetCreateTable struct {
	SqlCreateTable string `sql:"sql_create_table"` // 创建表的sql
}

// GetSchema 获取 当前数据库名
//line sql/gen_sql.sql:6
func GetSchema() (resp *RespGetSchema, err error) {
	name := "GetSchema"

	temp := Template.Lookup(name)
	if temp == nil {
		var src []byte
		src, err = base64.StdEncoding.DecodeString("CgotLSBAVHlwZSBTZWxlY3QKLS0gQENvbW0gIuiOt+WPliDlvZPliY3mlbDmja7lupPlkI0iCi0tIEBSZXNwIFRhYmxlU2NoZW1hICAgICAgICAgc3RyaW5nICLojrflj5Yg5b2T5YmN5pWw5o2u5bqT5ZCNIgoKU0VMRUNUIERBVEFCQVNFKCkgQVMgYHRhYmxlX3NjaGVtYWA7Cgo=")
		if err != nil {
			return
		}
		Template.New(name).Parse(string(src))
		temp = Template.Lookup(name)
	}

	var sqlStr string
	sqlStr, err = grm.Execute(temp, nil)
	if err != nil {
		return
	}

	if Println != nil {
		Println(sqlStr)
	}

	var db *sql.DB
	db, err = GetDB()
	if err != nil {
		return
	}

	_, err = grm.Query(db, sqlStr, nil, &resp, MaxLimit, FieldName, MaxFork)
	return
}

// RespGetSchema ...
//line sql/gen_sql.sql:6
type RespGetSchema struct {
	TableSchema string `sql:"table_schema"` // 获取 当前数据库名
}

// GetTable 获取 指定库的所有表
//line sql/gen_sql.sql:17
func GetTable(req *ReqGetTable) (resp []*RespGetTable, err error) {
	name := "GetTable"

	temp := Template.Lookup(name)
	if temp == nil {
		var src []byte
		src, err = base64.StdEncoding.DecodeString("CgotLSBAVHlwZSAgU2VsZWN0ICAgICAgICAgICAgICAgIFtdCi0tIEBDb21tICAi6I635Y+WIOaMh+WumuW6k+eahOaJgOacieihqCIKLS0gQENvdW50Ci0tIEBSZXEgICBUYWJsZVNjaGVtYSAgICAgICAgICAgc3RyaW5nIOaVsOaNruW6k+WQjQotLSBAUmVzcCAgVGFibGVOYW1lICAgICAgICAgICAgIHN0cmluZyDmiYDmnInooagKClNFTEVDVCAKICAgIGB0YWJsZV9uYW1lYApGUk9NCiAgICBgaW5mb3JtYXRpb25fc2NoZW1hYC5gY29sdW1uc2AKV0hFUkUKICAgIGB0YWJsZV9zY2hlbWFgID0gOlRhYmxlU2NoZW1hCkdST1VQIEJZIGB0YWJsZV9uYW1lYDsKCg==")
		if err != nil {
			return
		}
		Template.New(name).Parse(string(src))
		temp = Template.Lookup(name)
	}

	var sqlStr string
	sqlStr, err = grm.Execute(temp, req)
	if err != nil {
		return
	}

	if Println != nil {
		Println(sqlStr)
	}

	var db *sql.DB
	db, err = GetDB()
	if err != nil {
		return
	}

	_, err = grm.Query(db, sqlStr, req, &resp, MaxLimit, FieldName, MaxFork)
	return
}

// ReqGetTable ...
//line sql/gen_sql.sql:17
type ReqGetTable struct {
	TableSchema string `sql:"table_schema"` // 数据库名
}

// RespGetTable ...
//line sql/gen_sql.sql:17
type RespGetTable struct {
	TableName string `sql:"table_name"` // 所有表
}

// GetTableCount 获取 指定库的所有表
//line sql/gen_sql.sql:17
func GetTableCount(req *ReqGetTableCount) (resp *RespGetTableCount, err error) {
	name := "GetTable"

	temp := Template.Lookup(name)
	if temp == nil {
		var src []byte
		src, err = base64.StdEncoding.DecodeString("CgotLSBAVHlwZSAgU2VsZWN0ICAgICAgICAgICAgICAgIFtdCi0tIEBDb21tICAi6I635Y+WIOaMh+WumuW6k+eahOaJgOacieihqCIKLS0gQENvdW50Ci0tIEBSZXEgICBUYWJsZVNjaGVtYSAgICAgICAgICAgc3RyaW5nIOaVsOaNruW6k+WQjQotLSBAUmVzcCAgVGFibGVOYW1lICAgICAgICAgICAgIHN0cmluZyDmiYDmnInooagKClNFTEVDVCAKICAgIGB0YWJsZV9uYW1lYApGUk9NCiAgICBgaW5mb3JtYXRpb25fc2NoZW1hYC5gY29sdW1uc2AKV0hFUkUKICAgIGB0YWJsZV9zY2hlbWFgID0gOlRhYmxlU2NoZW1hCkdST1VQIEJZIGB0YWJsZV9uYW1lYDsKCg==")
		if err != nil {
			return
		}
		Template.New(name).Parse(string(src))
		temp = Template.Lookup(name)
	}

	var sqlStr string
	sqlStr, err = grm.ExecuteCount(temp, req)
	if err != nil {
		return
	}

	if Println != nil {
		Println(sqlStr)
	}

	var db *sql.DB
	db, err = GetDB()
	if err != nil {
		return
	}

	_, err = grm.Query(db, sqlStr, req, &resp, MaxLimit, FieldName, MaxFork)
	return
}

// ReqGetTableCount ...
//line sql/gen_sql.sql:17
type ReqGetTableCount struct {
	TableSchema string `sql:"table_schema"` // 数据库名
}

// RespGetTableCount ...
//line sql/gen_sql.sql:17
type RespGetTableCount struct {
	Count int
}
