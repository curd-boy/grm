// Code generated by "pkgimport -p sqlparser -i gopkg.in/go-grm/sqlparser.v1 -o sqlparser.go"; DO NOT EDIT.
// Install by "go get -u -v gopkg.in/pkgimport.v1/cmd/pkgimport";
//go:generate pkgimport -p sqlparser -i gopkg.in/go-grm/sqlparser.v1 -o sqlparser.go

package sqlparser

import (
	origin "gopkg.in/go-grm/sqlparser.v1"
)

type (
	// type

	/*
	 */
	ParsedQuery = origin.ParsedQuery

	/*
	 */
	Tokenizer = origin.Tokenizer

	/*
	 */
	NodeFormatter = origin.NodeFormatter

	/*
	 */
	TrackedBuffer = origin.TrackedBuffer

	/*
	 */
	SQLNode = origin.SQLNode

	/*
	 */
	Visit = origin.Visit

	/*
	 */
	Statement = origin.Statement

	/*
	 */
	SelectStatement = origin.SelectStatement

	/*
	 */
	Select = origin.Select

	/*
	 */
	ParenSelect = origin.ParenSelect

	/*
	 */
	Union = origin.Union

	/*
	 */
	Insert = origin.Insert

	/*
	 */
	InsertRows = origin.InsertRows

	/*
	 */
	Update = origin.Update

	/*
	 */
	Delete = origin.Delete

	/*
	 */
	Set = origin.Set

	/*
	 */
	DDL = origin.DDL

	/*
	 */
	PartitionSpec = origin.PartitionSpec

	/*
	 */
	PartitionDefinition = origin.PartitionDefinition

	/*
	 */
	TableSpec = origin.TableSpec

	/*
	 */
	ColumnDefinition = origin.ColumnDefinition

	/*
	 */
	ColumnType = origin.ColumnType

	/*
	 */
	IndexDefinition = origin.IndexDefinition

	/*
	 */
	IndexInfo = origin.IndexInfo

	/*
	 */
	IndexColumn = origin.IndexColumn

	/*
	 */
	LengthScaleOption = origin.LengthScaleOption

	/*
	 */
	ColumnKeyOption = origin.ColumnKeyOption

	/*
	 */
	Show = origin.Show

	/*
	 */
	Use = origin.Use

	/*
	 */
	OtherRead = origin.OtherRead

	/*
	 */
	OtherAdmin = origin.OtherAdmin

	/*
	 */
	Comments = origin.Comments

	/*
	 */
	SelectExprs = origin.SelectExprs

	/*
	 */
	SelectExpr = origin.SelectExpr

	/*
	 */
	StarExpr = origin.StarExpr

	/*
	 */
	AliasedExpr = origin.AliasedExpr

	/*
	 */
	Nextval = origin.Nextval

	/*
	 */
	Columns = origin.Columns

	/*
	 */
	TableExprs = origin.TableExprs

	/*
	 */
	TableExpr = origin.TableExpr

	/*
	 */
	AliasedTableExpr = origin.AliasedTableExpr

	/*
	 */
	SimpleTableExpr = origin.SimpleTableExpr

	/*
	 */
	TableNames = origin.TableNames

	/*
	 */
	TableName = origin.TableName

	/*
	 */
	ParenTableExpr = origin.ParenTableExpr

	/*
	 */
	JoinCondition = origin.JoinCondition

	/*
	 */
	JoinTableExpr = origin.JoinTableExpr

	/*
	 */
	IndexHints = origin.IndexHints

	/*
	 */
	Where = origin.Where

	/*
	 */
	Expr = origin.Expr

	/*
	 */
	Exprs = origin.Exprs

	/*
	 */
	AndExpr = origin.AndExpr

	/*
	 */
	OrExpr = origin.OrExpr

	/*
	 */
	NotExpr = origin.NotExpr

	/*
	 */
	ParenExpr = origin.ParenExpr

	/*
	 */
	ComparisonExpr = origin.ComparisonExpr

	/*
	 */
	RangeCond = origin.RangeCond

	/*
	 */
	IsExpr = origin.IsExpr

	/*
	 */
	ExistsExpr = origin.ExistsExpr

	/*
	 */
	ValType = origin.ValType

	/*
	 */
	SQLVal = origin.SQLVal

	/*
	 */
	NullVal = origin.NullVal

	/*
	 */
	BoolVal = origin.BoolVal

	/*
	 */
	ColName = origin.ColName

	/*
	 */
	ColTuple = origin.ColTuple

	/*
	 */
	ValTuple = origin.ValTuple

	/*
	 */
	Subquery = origin.Subquery

	/*
	 */
	ListArg = origin.ListArg

	/*
	 */
	BinaryExpr = origin.BinaryExpr

	/*
	 */
	UnaryExpr = origin.UnaryExpr

	/*
	 */
	IntervalExpr = origin.IntervalExpr

	/*
	 */
	CollateExpr = origin.CollateExpr

	/*
	 */
	FuncExpr = origin.FuncExpr

	/*
	 */
	GroupConcatExpr = origin.GroupConcatExpr

	/*
	 */
	ValuesFuncExpr = origin.ValuesFuncExpr

	/*
	 */
	ConvertExpr = origin.ConvertExpr

	/*
	 */
	ConvertUsingExpr = origin.ConvertUsingExpr

	/*
	 */
	ConvertType = origin.ConvertType

	/*
	 */
	MatchExpr = origin.MatchExpr

	/*
	 */
	CaseExpr = origin.CaseExpr

	/*
	 */
	Default = origin.Default

	/*
	 */
	When = origin.When

	/*
	 */
	GroupBy = origin.GroupBy

	/*
	 */
	OrderBy = origin.OrderBy

	/*
	 */
	Order = origin.Order

	/*
	 */
	Limit = origin.Limit

	/*
	 */
	Values = origin.Values

	/*
	 */
	UpdateExprs = origin.UpdateExprs

	/*
	 */
	UpdateExpr = origin.UpdateExpr

	/*
	 */
	OnDup = origin.OnDup

	/*
	 */
	ColIdent = origin.ColIdent

	/*
	 */
	TableIdent = origin.TableIdent

	/*
	 */
	Encodable = origin.Encodable

	/*
	 */
	InsertValues = origin.InsertValues

	/*
	 */
	TupleEqualityList = origin.TupleEqualityList
)

var (
	// function

	/*Normalize changes the statement to use bind values, and
	updates the bind vars to those values. The supplied prefix
	is used to generate the bind var names. The function ensures
	that there are no collisions with existing bind vars.
	Within Select constructs, bind vars are deduped. This allows
	us to identify vindex equality. Otherwise, every value is
	treated as distinct.

	*/
	Normalize = origin.Normalize

	/*GetBindvars returns a map of the bind vars referenced in the statement.
	TODO(sougou); This function gets called again from vtgate/planbuilder.
	Ideally, this should be done only once.

	*/
	GetBindvars = origin.GetBindvars

	/*NewParsedQuery returns a ParsedQuery of the ast.

	 */
	NewParsedQuery = origin.NewParsedQuery

	/*EncodeValue encodes one bind variable value into the query.

	 */
	EncodeValue = origin.EncodeValue

	/*FetchBindVar resolves the bind variable by fetching it from bindVariables.

	 */
	FetchBindVar = origin.FetchBindVar

	/*NewStringTokenizer creates a new Tokenizer for the
	sql string.

	*/
	NewStringTokenizer = origin.NewStringTokenizer

	/*NewTokenizer creates a new Tokenizer reading a sql
	string from the io.Reader.

	*/
	NewTokenizer = origin.NewTokenizer

	/*NewTrackedBuffer creates a new TrackedBuffer.

	 */
	NewTrackedBuffer = origin.NewTrackedBuffer

	/*BuildParsedQuery builds a ParsedQuery from the input.

	 */
	BuildParsedQuery = origin.BuildParsedQuery

	/*Preview analyzes the beginning of the query using a simpler and faster
	textual comparison to identify the statement type.

	*/
	Preview = origin.Preview

	/*IsDML returns true if the query is an INSERT, UPDATE or DELETE statement.

	 */
	IsDML = origin.IsDML

	/*GetTableName returns the table name from the SimpleTableExpr
	only if it's a simple expression. Otherwise, it returns "".

	*/
	GetTableName = origin.GetTableName

	/*IsColName returns true if the Expr is a *ColName.

	 */
	IsColName = origin.IsColName

	/*IsValue returns true if the Expr is a string, integral or value arg.
	NULL is not considered to be a value.

	*/
	IsValue = origin.IsValue

	/*IsNull returns true if the Expr is SQL NULL

	 */
	IsNull = origin.IsNull

	/*IsSimpleTuple returns true if the Expr is a ValTuple that
	contains simple values or if it's a list arg.

	*/
	IsSimpleTuple = origin.IsSimpleTuple

	/*NewPlanValue builds a sqltypes.PlanValue from an Expr.

	 */
	NewPlanValue = origin.NewPlanValue

	/*StringIn is a convenience function that returns
	true if str matches any of the values.

	*/
	StringIn = origin.StringIn

	/*ExtractSetValues returns a map of key-value pairs
	if the query is a SET statement. Values can be int64 or string.
	Since set variable names are case insensitive, all keys are returned
	as lower case.

	*/
	ExtractSetValues = origin.ExtractSetValues

	/*Parse parses the SQL in full and returns a Statement, which
	is the AST representation of the query. If a DDL statement
	is partially parsed but still contains a syntax error, the
	error is ignored and the DDL is returned anyway.

	*/
	Parse = origin.Parse

	/*ParseStrictDDL is the same as Parse except it errors on
	partially parsed DDL statements.

	*/
	ParseStrictDDL = origin.ParseStrictDDL

	/*ParseNext parses a single SQL statement from the tokenizer
	returning a Statement which is the AST representation of the query.
	The tokenizer will always read up to the end of the statement, allowing for
	the next call to ParseNext to parse any subsequent SQL statements. When
	there are no more statements to parse, a error of io.EOF is returned.

	*/
	ParseNext = origin.ParseNext

	/*SplitStatement returns the first sql statement up to either a ; or EOF
	and the remainder from the given buffer

	*/
	SplitStatement = origin.SplitStatement

	/*Walk calls visit on every node.
	If visit returns true, the underlying nodes
	are also visited. If it returns an error, walking
	is interrupted, and the error is returned.

	*/
	Walk = origin.Walk

	/*String returns a string representation of an SQLNode.

	 */
	String = origin.String

	/*Append appends the SQLNode to the buffer.

	 */
	Append = origin.Append

	/*NewWhere creates a WHERE or HAVING clause out
	of a Expr. If the expression is nil, it returns nil.

	*/
	NewWhere = origin.NewWhere

	/*ExprFromValue converts the given Value into an Expr or returns an error.

	 */
	ExprFromValue = origin.ExprFromValue

	/*NewStrVal builds a new StrVal.

	 */
	NewStrVal = origin.NewStrVal

	/*NewIntVal builds a new IntVal.

	 */
	NewIntVal = origin.NewIntVal

	/*NewFloatVal builds a new FloatVal.

	 */
	NewFloatVal = origin.NewFloatVal

	/*NewHexNum builds a new HexNum.

	 */
	NewHexNum = origin.NewHexNum

	/*NewHexVal builds a new HexVal.

	 */
	NewHexVal = origin.NewHexVal

	/*NewBitVal builds a new BitVal containing a bit literal.

	 */
	NewBitVal = origin.NewBitVal

	/*NewValArg builds a new ValArg.

	 */
	NewValArg = origin.NewValArg

	/*NewColIdent makes a new ColIdent.

	 */
	NewColIdent = origin.NewColIdent

	/*NewTableIdent creates a new TableIdent.

	 */
	NewTableIdent = origin.NewTableIdent

	/*Backtick produces a backticked literal given an input string.

	 */
	Backtick = origin.Backtick

	/*SplitTrailingComments splits the query trailing comments from the query.

	 */
	SplitTrailingComments = origin.SplitTrailingComments

	/*StripLeadingComments trims the SQL string and removes any leading comments

	 */
	StripLeadingComments = origin.StripLeadingComments

	/*FormatImpossibleQuery creates an impossible query in a TrackedBuffer.
	An impossible query is a modified version of a query where all selects have where clauses that are
	impossible for mysql to resolve. This is used in the vtgate and vttablet:

	- In the vtgate it's used for joins: if the first query returns no result, then vtgate uses the impossible
	query just to fetch field info from vttablet
	- In the vttablet, it's just an optimization: the field info is fetched once form MySQL, cached and reused
	for subsequent queries

	*/
	FormatImpossibleQuery = origin.FormatImpossibleQuery
)

var (
	// value

	/*
	 */
	LEX_ERROR = origin.LEX_ERROR

	/*
	 */
	UNION = origin.UNION

	/*
	 */
	SELECT = origin.SELECT

	/*
	 */
	INSERT = origin.INSERT

	/*
	 */
	UPDATE = origin.UPDATE

	/*
	 */
	DELETE = origin.DELETE

	/*
	 */
	FROM = origin.FROM

	/*
	 */
	WHERE = origin.WHERE

	/*
	 */
	GROUP = origin.GROUP

	/*
	 */
	HAVING = origin.HAVING

	/*
	 */
	ORDER = origin.ORDER

	/*
	 */
	BY = origin.BY

	/*
	 */
	LIMIT = origin.LIMIT

	/*
	 */
	OFFSET = origin.OFFSET

	/*
	 */
	FOR = origin.FOR

	/*
	 */
	ALL = origin.ALL

	/*
	 */
	DISTINCT = origin.DISTINCT

	/*
	 */
	AS = origin.AS

	/*
	 */
	EXISTS = origin.EXISTS

	/*
	 */
	ASC = origin.ASC

	/*
	 */
	DESC = origin.DESC

	/*
	 */
	INTO = origin.INTO

	/*
	 */
	DUPLICATE = origin.DUPLICATE

	/*
	 */
	KEY = origin.KEY

	/*
	 */
	DEFAULT = origin.DEFAULT

	/*
	 */
	SET = origin.SET

	/*
	 */
	LOCK = origin.LOCK

	/*
	 */
	VALUES = origin.VALUES

	/*
	 */
	LAST_INSERT_ID = origin.LAST_INSERT_ID

	/*
	 */
	NEXT = origin.NEXT

	/*
	 */
	VALUE = origin.VALUE

	/*
	 */
	SHARE = origin.SHARE

	/*
	 */
	MODE = origin.MODE

	/*
	 */
	SQL_NO_CACHE = origin.SQL_NO_CACHE

	/*
	 */
	SQL_CACHE = origin.SQL_CACHE

	/*
	 */
	JOIN = origin.JOIN

	/*
	 */
	STRAIGHT_JOIN = origin.STRAIGHT_JOIN

	/*
	 */
	LEFT = origin.LEFT

	/*
	 */
	RIGHT = origin.RIGHT

	/*
	 */
	INNER = origin.INNER

	/*
	 */
	OUTER = origin.OUTER

	/*
	 */
	CROSS = origin.CROSS

	/*
	 */
	NATURAL = origin.NATURAL

	/*
	 */
	USE = origin.USE

	/*
	 */
	FORCE = origin.FORCE

	/*
	 */
	ON = origin.ON

	/*
	 */
	USING = origin.USING

	/*
	 */
	ID = origin.ID

	/*
	 */
	HEX = origin.HEX

	/*
	 */
	STRING = origin.STRING

	/*
	 */
	INTEGRAL = origin.INTEGRAL

	/*
	 */
	FLOAT = origin.FLOAT

	/*
	 */
	HEXNUM = origin.HEXNUM

	/*
	 */
	VALUE_ARG = origin.VALUE_ARG

	/*
	 */
	LIST_ARG = origin.LIST_ARG

	/*
	 */
	COMMENT = origin.COMMENT

	/*
	 */
	COMMENT_KEYWORD = origin.COMMENT_KEYWORD

	/*
	 */
	BIT_LITERAL = origin.BIT_LITERAL

	/*
	 */
	NULL = origin.NULL

	/*
	 */
	TRUE = origin.TRUE

	/*
	 */
	FALSE = origin.FALSE

	/*
	 */
	OR = origin.OR

	/*
	 */
	AND = origin.AND

	/*
	 */
	NOT = origin.NOT

	/*
	 */
	BETWEEN = origin.BETWEEN

	/*
	 */
	CASE = origin.CASE

	/*
	 */
	WHEN = origin.WHEN

	/*
	 */
	THEN = origin.THEN

	/*
	 */
	ELSE = origin.ELSE

	/*
	 */
	END = origin.END

	/*
	 */
	LE = origin.LE

	/*
	 */
	GE = origin.GE

	/*
	 */
	NE = origin.NE

	/*
	 */
	NULL_SAFE_EQUAL = origin.NULL_SAFE_EQUAL

	/*
	 */
	IS = origin.IS

	/*
	 */
	LIKE = origin.LIKE

	/*
	 */
	REGEXP = origin.REGEXP

	/*
	 */
	IN = origin.IN

	/*
	 */
	SHIFT_LEFT = origin.SHIFT_LEFT

	/*
	 */
	SHIFT_RIGHT = origin.SHIFT_RIGHT

	/*
	 */
	DIV = origin.DIV

	/*
	 */
	MOD = origin.MOD

	/*
	 */
	UNARY = origin.UNARY

	/*
	 */
	COLLATE = origin.COLLATE

	/*
	 */
	BINARY = origin.BINARY

	/*
	 */
	UNDERSCORE_BINARY = origin.UNDERSCORE_BINARY

	/*
	 */
	INTERVAL = origin.INTERVAL

	/*
	 */
	JSON_EXTRACT_OP = origin.JSON_EXTRACT_OP

	/*
	 */
	JSON_UNQUOTE_EXTRACT_OP = origin.JSON_UNQUOTE_EXTRACT_OP

	/*
	 */
	CREATE = origin.CREATE

	/*
	 */
	ALTER = origin.ALTER

	/*
	 */
	DROP = origin.DROP

	/*
	 */
	RENAME = origin.RENAME

	/*
	 */
	ANALYZE = origin.ANALYZE

	/*
	 */
	TABLE = origin.TABLE

	/*
	 */
	INDEX = origin.INDEX

	/*
	 */
	VIEW = origin.VIEW

	/*
	 */
	TO = origin.TO

	/*
	 */
	IGNORE = origin.IGNORE

	/*
	 */
	IF = origin.IF

	/*
	 */
	UNIQUE = origin.UNIQUE

	/*
	 */
	PRIMARY = origin.PRIMARY

	/*
	 */
	SHOW = origin.SHOW

	/*
	 */
	DESCRIBE = origin.DESCRIBE

	/*
	 */
	EXPLAIN = origin.EXPLAIN

	/*
	 */
	DATE = origin.DATE

	/*
	 */
	ESCAPE = origin.ESCAPE

	/*
	 */
	REPAIR = origin.REPAIR

	/*
	 */
	OPTIMIZE = origin.OPTIMIZE

	/*
	 */
	TRUNCATE = origin.TRUNCATE

	/*
	 */
	MAXVALUE = origin.MAXVALUE

	/*
	 */
	PARTITION = origin.PARTITION

	/*
	 */
	REORGANIZE = origin.REORGANIZE

	/*
	 */
	LESS = origin.LESS

	/*
	 */
	THAN = origin.THAN

	/*
	 */
	BIT = origin.BIT

	/*
	 */
	TINYINT = origin.TINYINT

	/*
	 */
	SMALLINT = origin.SMALLINT

	/*
	 */
	MEDIUMINT = origin.MEDIUMINT

	/*
	 */
	INT = origin.INT

	/*
	 */
	INTEGER = origin.INTEGER

	/*
	 */
	BIGINT = origin.BIGINT

	/*
	 */
	INTNUM = origin.INTNUM

	/*
	 */
	REAL = origin.REAL

	/*
	 */
	DOUBLE = origin.DOUBLE

	/*
	 */
	FLOAT_TYPE = origin.FLOAT_TYPE

	/*
	 */
	DECIMAL = origin.DECIMAL

	/*
	 */
	NUMERIC = origin.NUMERIC

	/*
	 */
	TIME = origin.TIME

	/*
	 */
	TIMESTAMP = origin.TIMESTAMP

	/*
	 */
	DATETIME = origin.DATETIME

	/*
	 */
	YEAR = origin.YEAR

	/*
	 */
	CHAR = origin.CHAR

	/*
	 */
	VARCHAR = origin.VARCHAR

	/*
	 */
	BOOL = origin.BOOL

	/*
	 */
	CHARACTER = origin.CHARACTER

	/*
	 */
	VARBINARY = origin.VARBINARY

	/*
	 */
	NCHAR = origin.NCHAR

	/*
	 */
	TEXT = origin.TEXT

	/*
	 */
	TINYTEXT = origin.TINYTEXT

	/*
	 */
	MEDIUMTEXT = origin.MEDIUMTEXT

	/*
	 */
	LONGTEXT = origin.LONGTEXT

	/*
	 */
	BLOB = origin.BLOB

	/*
	 */
	TINYBLOB = origin.TINYBLOB

	/*
	 */
	MEDIUMBLOB = origin.MEDIUMBLOB

	/*
	 */
	LONGBLOB = origin.LONGBLOB

	/*
	 */
	JSON = origin.JSON

	/*
	 */
	ENUM = origin.ENUM

	/*
	 */
	NULLX = origin.NULLX

	/*
	 */
	AUTO_INCREMENT = origin.AUTO_INCREMENT

	/*
	 */
	APPROXNUM = origin.APPROXNUM

	/*
	 */
	SIGNED = origin.SIGNED

	/*
	 */
	UNSIGNED = origin.UNSIGNED

	/*
	 */
	ZEROFILL = origin.ZEROFILL

	/*
	 */
	DATABASES = origin.DATABASES

	/*
	 */
	TABLES = origin.TABLES

	/*
	 */
	VITESS_KEYSPACES = origin.VITESS_KEYSPACES

	/*
	 */
	VITESS_SHARDS = origin.VITESS_SHARDS

	/*
	 */
	VSCHEMA_TABLES = origin.VSCHEMA_TABLES

	/*
	 */
	NAMES = origin.NAMES

	/*
	 */
	CHARSET = origin.CHARSET

	/*
	 */
	CURRENT_TIMESTAMP = origin.CURRENT_TIMESTAMP

	/*
	 */
	DATABASE = origin.DATABASE

	/*
	 */
	CURRENT_DATE = origin.CURRENT_DATE

	/*
	 */
	CURRENT_TIME = origin.CURRENT_TIME

	/*
	 */
	LOCALTIME = origin.LOCALTIME

	/*
	 */
	LOCALTIMESTAMP = origin.LOCALTIMESTAMP

	/*
	 */
	UTC_DATE = origin.UTC_DATE

	/*
	 */
	UTC_TIME = origin.UTC_TIME

	/*
	 */
	UTC_TIMESTAMP = origin.UTC_TIMESTAMP

	/*
	 */
	REPLACE = origin.REPLACE

	/*
	 */
	CONVERT = origin.CONVERT

	/*
	 */
	CAST = origin.CAST

	/*
	 */
	GROUP_CONCAT = origin.GROUP_CONCAT

	/*
	 */
	SEPARATOR = origin.SEPARATOR

	/*
	 */
	MATCH = origin.MATCH

	/*
	 */
	AGAINST = origin.AGAINST

	/*
	 */
	BOOLEAN = origin.BOOLEAN

	/*
	 */
	LANGUAGE = origin.LANGUAGE

	/*
	 */
	WITH = origin.WITH

	/*
	 */
	QUERY = origin.QUERY

	/*
	 */
	EXPANSION = origin.EXPANSION

	/*
	 */
	UNUSED = origin.UNUSED

	/*
	 */
	StmtSelect = origin.StmtSelect

	/*
	 */
	StmtInsert = origin.StmtInsert

	/*
	 */
	StmtReplace = origin.StmtReplace

	/*
	 */
	StmtUpdate = origin.StmtUpdate

	/*
	 */
	StmtDelete = origin.StmtDelete

	/*
	 */
	StmtDDL = origin.StmtDDL

	/*
	 */
	StmtBegin = origin.StmtBegin

	/*
	 */
	StmtCommit = origin.StmtCommit

	/*
	 */
	StmtRollback = origin.StmtRollback

	/*
	 */
	StmtSet = origin.StmtSet

	/*
	 */
	StmtShow = origin.StmtShow

	/*
	 */
	StmtUse = origin.StmtUse

	/*
	 */
	StmtOther = origin.StmtOther

	/*
	 */
	StmtUnknown = origin.StmtUnknown

	/*
	 */
	DistinctStr = origin.DistinctStr

	/*
	 */
	StraightJoinHint = origin.StraightJoinHint

	/*
	 */
	ForUpdateStr = origin.ForUpdateStr

	/*
	 */
	ShareModeStr = origin.ShareModeStr

	/*
	 */
	SQLCacheStr = origin.SQLCacheStr

	/*
	 */
	SQLNoCacheStr = origin.SQLNoCacheStr

	/*
	 */
	UnionStr = origin.UnionStr

	/*
	 */
	UnionAllStr = origin.UnionAllStr

	/*
	 */
	UnionDistinctStr = origin.UnionDistinctStr

	/*
	 */
	InsertStr = origin.InsertStr

	/*
	 */
	ReplaceStr = origin.ReplaceStr

	/*
	 */
	CreateStr = origin.CreateStr

	/*
	 */
	AlterStr = origin.AlterStr

	/*
	 */
	DropStr = origin.DropStr

	/*
	 */
	RenameStr = origin.RenameStr

	/*
	 */
	TruncateStr = origin.TruncateStr

	/*
	 */
	ReorganizeStr = origin.ReorganizeStr

	/*
	 */
	ShowDatabasesStr = origin.ShowDatabasesStr

	/*
	 */
	ShowKeyspacesStr = origin.ShowKeyspacesStr

	/*
	 */
	ShowShardsStr = origin.ShowShardsStr

	/*
	 */
	ShowTablesStr = origin.ShowTablesStr

	/*
	 */
	ShowVSchemaTablesStr = origin.ShowVSchemaTablesStr

	/*
	 */
	ShowUnsupportedStr = origin.ShowUnsupportedStr

	/*
	 */
	JoinStr = origin.JoinStr

	/*
	 */
	StraightJoinStr = origin.StraightJoinStr

	/*
	 */
	LeftJoinStr = origin.LeftJoinStr

	/*
	 */
	RightJoinStr = origin.RightJoinStr

	/*
	 */
	NaturalJoinStr = origin.NaturalJoinStr

	/*
	 */
	NaturalLeftJoinStr = origin.NaturalLeftJoinStr

	/*
	 */
	NaturalRightJoinStr = origin.NaturalRightJoinStr

	/*
	 */
	UseStr = origin.UseStr

	/*
	 */
	IgnoreStr = origin.IgnoreStr

	/*
	 */
	ForceStr = origin.ForceStr

	/*
	 */
	WhereStr = origin.WhereStr

	/*
	 */
	HavingStr = origin.HavingStr

	/*
	 */
	EqualStr = origin.EqualStr

	/*
	 */
	LessThanStr = origin.LessThanStr

	/*
	 */
	GreaterThanStr = origin.GreaterThanStr

	/*
	 */
	LessEqualStr = origin.LessEqualStr

	/*
	 */
	GreaterEqualStr = origin.GreaterEqualStr

	/*
	 */
	NotEqualStr = origin.NotEqualStr

	/*
	 */
	NullSafeEqualStr = origin.NullSafeEqualStr

	/*
	 */
	InStr = origin.InStr

	/*
	 */
	NotInStr = origin.NotInStr

	/*
	 */
	LikeStr = origin.LikeStr

	/*
	 */
	NotLikeStr = origin.NotLikeStr

	/*
	 */
	RegexpStr = origin.RegexpStr

	/*
	 */
	NotRegexpStr = origin.NotRegexpStr

	/*
	 */
	JSONExtractOp = origin.JSONExtractOp

	/*
	 */
	JSONUnquoteExtractOp = origin.JSONUnquoteExtractOp

	/*
	 */
	BetweenStr = origin.BetweenStr

	/*
	 */
	NotBetweenStr = origin.NotBetweenStr

	/*
	 */
	IsNullStr = origin.IsNullStr

	/*
	 */
	IsNotNullStr = origin.IsNotNullStr

	/*
	 */
	IsTrueStr = origin.IsTrueStr

	/*
	 */
	IsNotTrueStr = origin.IsNotTrueStr

	/*
	 */
	IsFalseStr = origin.IsFalseStr

	/*
	 */
	IsNotFalseStr = origin.IsNotFalseStr

	/*
	 */
	StrVal = origin.StrVal

	/*
	 */
	IntVal = origin.IntVal

	/*
	 */
	FloatVal = origin.FloatVal

	/*
	 */
	HexNum = origin.HexNum

	/*
	 */
	HexVal = origin.HexVal

	/*
	 */
	ValArg = origin.ValArg

	/*
	 */
	BitVal = origin.BitVal

	/*
	 */
	BitAndStr = origin.BitAndStr

	/*
	 */
	BitOrStr = origin.BitOrStr

	/*
	 */
	BitXorStr = origin.BitXorStr

	/*
	 */
	PlusStr = origin.PlusStr

	/*
	 */
	MinusStr = origin.MinusStr

	/*
	 */
	MultStr = origin.MultStr

	/*
	 */
	DivStr = origin.DivStr

	/*
	 */
	IntDivStr = origin.IntDivStr

	/*
	 */
	ModStr = origin.ModStr

	/*
	 */
	ShiftLeftStr = origin.ShiftLeftStr

	/*
	 */
	ShiftRightStr = origin.ShiftRightStr

	/*
	 */
	UPlusStr = origin.UPlusStr

	/*
	 */
	UMinusStr = origin.UMinusStr

	/*
	 */
	TildaStr = origin.TildaStr

	/*
	 */
	BangStr = origin.BangStr

	/*
	 */
	BinaryStr = origin.BinaryStr

	/*
	 */
	UBinaryStr = origin.UBinaryStr

	/*
	 */
	Aggregates = origin.Aggregates

	/*
	 */
	CharacterSetStr = origin.CharacterSetStr

	/*
	 */
	BooleanModeStr = origin.BooleanModeStr

	/*
	 */
	NaturalLanguageModeStr = origin.NaturalLanguageModeStr

	/*
	 */
	NaturalLanguageModeWithQueryExpansionStr = origin.NaturalLanguageModeWithQueryExpansionStr

	/*
	 */
	QueryExpansionStr = origin.QueryExpansionStr

	/*
	 */
	AscScr = origin.AscScr

	/*
	 */
	DescScr = origin.DescScr
)
