// Code generated by "pkgimport -p sqltypes -i gopkg.in/go-grm/sqlparser.v1/dependency/sqltypes -o sqltypes.go"; DO NOT EDIT.
// Install by "go get -u -v gopkg.in/pkgimport.v1/cmd/pkgimport";
//go:generate pkgimport -p sqltypes -i gopkg.in/go-grm/sqlparser.v1/dependency/sqltypes -o sqltypes.go

package sqltypes

import (
	origin "gopkg.in/go-grm/sqlparser.v1/dependency/sqltypes"
)

type (
	// type

	/*
	 */
	BinWriter = origin.BinWriter

	/*
	 */
	Value = origin.Value

	/*
	 */
	PlanValue = origin.PlanValue
)

var (
	// function

	/*IsIntegral returns true if querypb.Type is an integral
	(signed/unsigned) that can be represented using
	up to 64 binary bits.
	If you have a Value object, use its member function.

	*/
	IsIntegral = origin.IsIntegral

	/*IsSigned returns true if querypb.Type is a signed integral.
	If you have a Value object, use its member function.

	*/
	IsSigned = origin.IsSigned

	/*IsUnsigned returns true if querypb.Type is an unsigned integral.
	Caution: this is not the same as !IsSigned.
	If you have a Value object, use its member function.

	*/
	IsUnsigned = origin.IsUnsigned

	/*IsFloat returns true is querypb.Type is a floating point.
	If you have a Value object, use its member function.

	*/
	IsFloat = origin.IsFloat

	/*IsQuoted returns true if querypb.Type is a quoted text or binary.
	If you have a Value object, use its member function.

	*/
	IsQuoted = origin.IsQuoted

	/*IsText returns true if querypb.Type is a text.
	If you have a Value object, use its member function.

	*/
	IsText = origin.IsText

	/*IsBinary returns true if querypb.Type is a binary.
	If you have a Value object, use its member function.

	*/
	IsBinary = origin.IsBinary

	/*MySQLToType computes the vitess type from mysql type and flags.

	 */
	MySQLToType = origin.MySQLToType

	/*TypeToMySQL returns the equivalent mysql type and flag for a vitess type.

	 */
	TypeToMySQL = origin.TypeToMySQL

	/*NewValue builds a Value using typ and val. If the value and typ
	don't match, it returns an error.

	*/
	NewValue = origin.NewValue

	/*MakeTrusted makes a new Value based on the type.
	This function should only be used if you know the value
	and type conform to the rules. Every place this function is
	called, a comment is needed that explains why it's justified.
	Exceptions: The current package and mysql package do not need
	comments. Other packages can also use the function to create
	VarBinary or VarChar values.

	*/
	MakeTrusted = origin.MakeTrusted

	/*NewInt64 builds an Int64 Value.

	 */
	NewInt64 = origin.NewInt64

	/*NewInt32 builds an Int64 Value.

	 */
	NewInt32 = origin.NewInt32

	/*NewUint64 builds an Uint64 Value.

	 */
	NewUint64 = origin.NewUint64

	/*NewFloat64 builds an Float64 Value.

	 */
	NewFloat64 = origin.NewFloat64

	/*NewVarChar builds a VarChar Value.

	 */
	NewVarChar = origin.NewVarChar

	/*NewVarBinary builds a VarBinary Value.
	The input is a string because it's the most common use case.

	*/
	NewVarBinary = origin.NewVarBinary

	/*NewIntegral builds an integral type from a string representaion.
	The type will be Int64 or Uint64. Int64 will be preferred where possible.

	*/
	NewIntegral = origin.NewIntegral

	/*InterfaceToValue builds a value from a go type.
	Supported types are nil, int64, uint64, float64,
	string and []byte.
	This function is deprecated. Use the type-specific
	functions instead.

	*/
	InterfaceToValue = origin.InterfaceToValue

	/*ValueToProto converts Value to a *querypb.Value.

	 */
	ValueToProto = origin.ValueToProto

	/*ProtoToValue converts a *querypb.Value to a Value.

	 */
	ProtoToValue = origin.ProtoToValue

	/*BuildBindVariables builds a map[string]*querypb.BindVariable from a map[string]interface{}.

	 */
	BuildBindVariables = origin.BuildBindVariables

	/*Int64BindVariable converts an int64 to a bind var.

	 */
	Int64BindVariable = origin.Int64BindVariable

	/*Uint64BindVariable converts a uint64 to a bind var.

	 */
	Uint64BindVariable = origin.Uint64BindVariable

	/*Float64BindVariable converts a float64 to a bind var.

	 */
	Float64BindVariable = origin.Float64BindVariable

	/*StringBindVariable converts a string to a bind var.

	 */
	StringBindVariable = origin.StringBindVariable

	/*BytesBindVariable converts a []byte to a bind var.

	 */
	BytesBindVariable = origin.BytesBindVariable

	/*ValueBindVariable converts a Value to a bind var.

	 */
	ValueBindVariable = origin.ValueBindVariable

	/*BuildBindVariable builds a *querypb.BindVariable from a valid input type.

	 */
	BuildBindVariable = origin.BuildBindVariable

	/*ValidateBindVariables validates a map[string]*querypb.BindVariable.

	 */
	ValidateBindVariables = origin.ValidateBindVariables

	/*ValidateBindVariable returns an error if the bind variable has inconsistent
	fields.

	*/
	ValidateBindVariable = origin.ValidateBindVariable

	/*BindVariableToValue converts a bind var into a Value.

	 */
	BindVariableToValue = origin.BindVariableToValue

	/*BindVariablesEqual compares two maps of bind variables.

	 */
	BindVariablesEqual = origin.BindVariablesEqual

	/*CopyBindVariables returns a shallow-copy of the given bindVariables map.

	 */
	CopyBindVariables = origin.CopyBindVariables

	/*ResolveRows resolves a []PlanValue as rows based on the supplied bindvars.

	 */
	ResolveRows = origin.ResolveRows

	/*TestBindVariable makes a *querypb.BindVariable from
	an interface{}.It panics on invalid input.
	This function should only be used for testing.

	*/
	TestBindVariable = origin.TestBindVariable

	/*TestValue builds a Value from typ and val.
	This function should only be used for testing.

	*/
	TestValue = origin.TestValue
)

var (
	// value

	/*
	 */
	Null = origin.Null

	/*
	 */
	Int8 = origin.Int8

	/*
	 */
	Uint8 = origin.Uint8

	/*
	 */
	Int16 = origin.Int16

	/*
	 */
	Uint16 = origin.Uint16

	/*
	 */
	Int24 = origin.Int24

	/*
	 */
	Uint24 = origin.Uint24

	/*
	 */
	Int32 = origin.Int32

	/*
	 */
	Uint32 = origin.Uint32

	/*
	 */
	Int64 = origin.Int64

	/*
	 */
	Uint64 = origin.Uint64

	/*
	 */
	Float32 = origin.Float32

	/*
	 */
	Float64 = origin.Float64

	/*
	 */
	Timestamp = origin.Timestamp

	/*
	 */
	Date = origin.Date

	/*
	 */
	Time = origin.Time

	/*
	 */
	Datetime = origin.Datetime

	/*
	 */
	Year = origin.Year

	/*
	 */
	Decimal = origin.Decimal

	/*
	 */
	Text = origin.Text

	/*
	 */
	Blob = origin.Blob

	/*
	 */
	VarChar = origin.VarChar

	/*
	 */
	VarBinary = origin.VarBinary

	/*
	 */
	Char = origin.Char

	/*
	 */
	Binary = origin.Binary

	/*
	 */
	Bit = origin.Bit

	/*
	 */
	Enum = origin.Enum

	/*
	 */
	Set = origin.Set

	/*
	 */
	Geometry = origin.Geometry

	/*
	 */
	TypeJSON = origin.TypeJSON

	/*
	 */
	Expression = origin.Expression

	/*NULL represents the NULL value.

	 */
	NULL = origin.NULL

	/*DontEscape tells you if a character should not be escaped.

	 */
	DontEscape = origin.DontEscape

	/*
	 */
	SQLEncodeMap = origin.SQLEncodeMap

	/*
	 */
	SQLDecodeMap = origin.SQLDecodeMap

	/*
	 */
	NullBindVariable = origin.NullBindVariable
)
